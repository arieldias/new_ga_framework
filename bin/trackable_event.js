// Generated by CoffeeScript 1.7.1
(function() {
  if(!Function.prototype.bind){Function.prototype.bind=function(e){"use strict";if(typeof this!=="function"){throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable")}var t=Array.prototype.slice.call(arguments,1),n=this,r=function(){},i=function(){return n.apply(this instanceof r&&e?this:e,t.concat(Array.prototype.slice.call(arguments)))};r.prototype=this.prototype;i.prototype=new r;return i}}(function(){"use strict";var e=Object.prototype,t=e.__defineGetter__,n=e.__defineSetter__,r=e.__lookupGetter__,i=e.__lookupSetter__,s=e.hasOwnProperty;if(t&&n&&r&&i){if(!Object.defineProperty){Object.defineProperty=function(e,o,u){if(arguments.length<3){throw new TypeError("Arguments not optional")}o+="";if(s.call(u,"value")){if(!r.call(e,o)&&!i.call(e,o)){e[o]=u.value}if(s.call(u,"get")||s.call(u,"set")){throw new TypeError("Cannot specify an accessor and a value")}}if(!(u.writable&&u.enumerable&&u.configurable)){throw new TypeError("This implementation of Object.defineProperty does not support"+" false for configurable, enumerable, or writable.")}if(u.get){t.call(e,o,u.get)}if(u.set){n.call(e,o,u.set)}return e}}if(!Object.getOwnPropertyDescriptor){Object.getOwnPropertyDescriptor=function(e,t){if(arguments.length<2){throw new TypeError("Arguments not optional.")}t+="";var n={configurable:true,enumerable:true,writable:true},o=r.call(e,t),u=i.call(e,t);if(!s.call(e,t)){return n}if(!o&&!u){n.value=e[t];return n}delete n.writable;n.get=n.set=undefined;if(o){n.get=o}if(u){n.set=u}return n}}if(!Object.defineProperties){Object.defineProperties=function(e,t){var n;for(n in t){if(s.call(t,n)){Object.defineProperty(e,n,t[n])}}}}}})();if(!document.documentElement.dataset&&(!Object.getOwnPropertyDescriptor(Element.prototype,"dataset")||!Object.getOwnPropertyDescriptor(Element.prototype,"dataset").get)){var propDescriptor={enumerable:true,get:function(){"use strict";var e,t=this,n,r,i,s,o,u=this.attributes,a=u.length,f=function(e){return e.charAt(1).toUpperCase()},l=function(){return this},c=function(e,t){return typeof t!=="undefined"?this.setAttribute(e,t):this.removeAttribute(e)};try{(({})).__defineGetter__("test",function(){});n={}}catch(h){n=document.createElement("div")}for(e=0;e<a;e++){o=u[e];if(o&&o.name&&/^data-\w[\w\-]*$/.test(o.name)){r=o.value;i=o.name;s=i.substr(5).replace(/-./g,f);try{Object.defineProperty(n,s,{enumerable:this.enumerable,get:l.bind(r||""),set:c.bind(t,i)})}catch(p){n[s]=r}}}return n}};try{Object.defineProperty(Element.prototype,"dataset",propDescriptor)}catch(e){propDescriptor.enumerable=false;Object.defineProperty(Element.prototype,"dataset",propDescriptor)}};
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.TrackableEvent = (function() {
    function TrackableEvent(analytics, category, options) {
      this.getHit = __bind(this.getHit, this);
      this.eventFired = __bind(this.eventFired, this);
      this.type = options.type || "send";
      this.action = options.action || "click";
      this.hitType = options.hitType || "event";
      this.label = options.label;
      this.value = options.value;
      this.category = category;
      this.tracker = analytics;
      if (options.el != null) {
        this.el = options.el;
        this.el.addEventListener(this.action, this.eventFired);
      }
    }

    TrackableEvent.prototype.eventFired = function(e) {
      return this.tracker.track(this, e);
    };

    TrackableEvent.prototype.getLabel = function(e) {
      var el, target;
      el = e.currentTarget;
      if (!this.label) {
        el = e.currentTarget;
        this.label = el.dataset.trackLabel;
      }
      if (this.label.substr(0, 3) === "js:") {
        target = el;
        return eval(this.label.substr(3));
      } else {
        return this.label;
      }
    };

    TrackableEvent.prototype.getValue = function(e) {
      var el, target;
      if (!this.value) {
        el = e.currentTarget;
        this.label = el.dataset.trackValue;
      }
      if ((this.value != null) && this.value.substr(0, 3) === "js:") {
        target = e.currentTarget;
        return eval(this.value.substr(3));
      } else {
        return this.value;
      }
    };

    TrackableEvent.prototype.getHit = function() {
      var hit;
      hit = {
        hitType: this.hitType,
        eventCategory: this.category,
        eventAction: this.action,
        eventLabel: this.getLabel(e),
        eventValue: this.getValue(e)
      };
      for (var i in hit) {
      if (hit[i] === null || hit[i] === undefined) {
        delete hit[i];
      }
    };
      return hit;
    };

    TrackableEvent.fetchFromSelector = function(selector, analytics) {
      var el, elements, options, _i, _len, _results;
      elements = document.querySelectorAll(selector);
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        el = elements[_i];
        options = {
          label: el.dataset.trackLabel,
          value: el.dataset.trackValue,
          "el": el
        };
        _results.push(new TrackableEvent(analytics, el.dataset.trackCategory, options));
      }
      return _results;
    };

    return TrackableEvent;

  })();

  window.TrackablePageview = (function() {
    function TrackablePageview(analytics, page) {
      this.type = "send";
      this.hitType = "pageview";
      this.page = page;
      this.tracker = analytics;
    }

    TrackablePageview.prototype.getHit = function() {
      var hit;
      hit = {
        page: this.page,
        hitType: this.hitType
      };
      for (var i in hit) {
      if (hit[i] === null || hit[i] === undefined) {
        delete hit[i];
      }
    };
      return hit;
    };

    return TrackablePageview;

  })();

  window.TrackableCustomPage = (function() {
    function TrackableCustomPage(options) {
      this.index = options.index;
      this.name = options.name || "page_type";
      this.value = options.value;
      this.optScope = options.optScope;
      this.type = "set";
    }

    TrackableCustomPage.prototype.getHit = function() {
      var hit;
      hit = {};
      hit["dimension" + this.index] = this.value;
      for (var i in hit) {
      if (hit[i] === null || hit[i] === undefined) {
        delete hit[i];
      }
    };
      return hit;
    };

    TrackableCustomPage.getFromBody = function(analytics) {
      return new TrackableCustomPage(document.body.dataset);
    };

    return TrackableCustomPage;

  })();

  window.TrackableTransaction = (function() {
    function TrackableTransaction(id, storeName, total, shipping, salesTax) {
      this.hit = __bind(this.hit, this);
      this.id = id;
      this.storeName = storeName;
      this.total = total;
      this.shipping = shipping;
      this.salesTax = salesTax;
      this.type = "ecommerce:addTransaction";
    }

    TrackableTransaction.prototype.hit = function() {
      var hit;
      hit = {
        id: this.id,
        affiliation: this.storeName,
        revenue: this.total,
        shipping: this.shipping,
        tax: this.salesTax
      };
      for (var i in hit) {
      if (hit[i] === null || hit[i] === undefined) {
        delete hit[i];
      }
    };
      return hit;
    };

    TrackableTransaction.createTransaction = function() {
      var bodyData, transaction;
      bodyData = document.body.dataset;
      transaction = new window.TrackableTransaction(bodyData.trackId, bodyData.trackStoreName, bodyData.trackTotal, bodyData.trackShipping, bodyData.trackSalesTax);
      return transaction;
    };

    return TrackableTransaction;

  })();

  window.TrackableItem = (function() {
    function TrackableItem(id, name, options) {
      this.getHit = __bind(this.getHit, this);
      this.id = id;
      this.name = name;
      this.sku = options.sku;
      this.category = options.category;
      this.price = options.price;
      this.quantity = options.quantity;
      this.type = "ecommerce:addItem";
    }

    TrackableItem.prototype.getHit = function() {
      var hit;
      hit = {
        id: this.id,
        name: this.name,
        sku: this.sku,
        category: this.category,
        price: this.price,
        quantity: this.quantity
      };
      for (var i in hit) {
      if (hit[i] === null || hit[i] === undefined) {
        delete hit[i];
      } else {
        hit[i].toString();
      }
    };
      return hit;
    };

    TrackableItem.fetchFromSelector = function(selector, analytics) {
      var category, id, item, items, name, options, price, quantity, sku, _i, _len, _results;
      items = document.querySelectorAll(selector);
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        id = item.querySelector("[data-track-id]").dataset.trackId;
        name = item.querySelector("[data-track-name]").dataset.trackName;
        sku = item.querySelector("[data-track-sku]").dataset.trackSku;
        category = item.querySelector("[data-track-category]").dataset.trackCategory;
        price = item.querySelector("[data-track-price]").dataset.trackPrice;
        quantity = item.querySelector("[data-track-quantity]").dataset.trackQuantity;
        options = {
          sku: sku,
          category: category,
          price: price,
          quantity: quantity
        };
        _results.push(analytics.track(new window.TrackableItem(id, name, options)));
      }
      return _results;
    };

    return TrackableItem;

  })();

  window.SendEcommerce = (function() {
    function SendEcommerce() {
      this.type = "ecommerce:send";
    }

    SendEcommerce.prototype.getHit = function() {
      return {};
    };

    return SendEcommerce;

  })();

}).call(this);
